name: Deployment Pipeline with PRs

on:
  workflow_run:
    workflows: [ "Build and Push Docker Image" ]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Code for this script from this guide: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#using-data-from-the-triggering-workflow
      - name: Get image name from build pipeline
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "image_tag"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/image_tag.zip`, Buffer.from(download.data));

      - name: Unzip artifact
        run: unzip image_tag.zip

      - name: Export image tag
        id: export-image-tag
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            let fs = require('fs');
            let image_tag = fs.readFileSync('./image_tag', {encoding:'utf8', flag:'r'});
            // replace new-lines from file
            image_tag = image_tag.replace(/(\r\n|\n|\r)/gm, "");
            console.log("Image Tag: " + image_tag)
            return image_tag

      - name: Print and check image tag
        id: check-image-tag
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            let image_tag = "${{ steps.export-image-tag.outputs.result }}";
            let semver_regex = new RegExp("^(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\\+([0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*))?$");
            console.log("Image Tag: " + image_tag)
            if (semver_regex.test(image_tag)) {
              console.log("Semver pattern valid. Continuing Pipeline.");
              return "true"
            } else {
              console.log("No semver pattern from previous docker build. Skipping Pipeline.");
              return "false"
            }

      - name: Update image tags and open PRs
        if: ${{ steps.check-image-tag.outputs.result == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.RENOVATE_TOKEN }} # Reuse RENOVATE_TOKEN to avoid needing multiple tokens
          IMAGE_NAME: ${{ github.repository }}
          IMAGE_TAG: ${{steps.export-image-tag.outputs.result}}
        run: |
          # Configure Git User
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          
          # Repeat everything frome here for all three stages
          for STAGE in dev staging prod
          do
            # Get latest state and create a new branch for changes
            git checkout main
            git fetch origin
            git pull
            # "|| true", so that the task does not fail if the branch already exists / does not exist yet, depending on the command
            git switch pipeline/update_$STAGE || true
            git checkout -b pipeline/update_$STAGE || true
            git branch --set-upstream-to=origin/pipeline/update_$STAGE || true
            git pull --rebase || true
            
            # Change Tag
            yq -i ".images[0].newTag = \"${IMAGE_TAG}\"" ./k8s-deployments/02-ci-pipeline/overlays/$STAGE/kustomization.yaml
            
            # Add and Push Changes to GitHub
            git add ./k8s-deployments/02-ci-pipeline/overlays/$STAGE/kustomization.yaml
            git commit -m "[GitHub Action] $STAGE: Update tag for ${IMAGE_NAME} to ${IMAGE_TAG}"
            git push -u origin pipeline/update_$STAGE
            
            # Create PR
            # "|| true", so that task does not fail, if the PR already exists
            gh pr create -B main -H pipeline/update_$STAGE --title "(GitHub Action) $STAGE: Update ${IMAGE_NAME} Docker tag" --body "(GitHub Action) $STAGE: Update ${IMAGE_NAME} Docker tag" || true
          done
